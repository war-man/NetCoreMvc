using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using RicoCore.Data.Interfaces;
using RicoCore.Infrastructure.Enums;
using RicoCore.Infrastructure.SharedKernel;

namespace RicoCore.Data.Entities.Test
{
    [Table("Tests")]
    public class Test : DomainEntity<Guid>
    {
        public Test()
        {           
        }
       
        /// <summary>
        /// tu dong hoan doi vi chi ca hoi cau hoi
        /// </summary>
        public bool isAutoSwap { set; get; }
        /// <summary>
        /// Mã Lớp
        /// </summary>
        public string gradeId { set; get; }
        /// <summary>
        /// Mã Môn
        /// </summary>
        public string subjectId { set; get; }
        /// <summary>
        /// Mã nóm bài kiểm tra
        /// </summary>
        public string testsCategoryId { set; get; }
        /// <summary>
        /// Tên bài kiểm tra
        /// </summary>
        public string name { set; get; }
        /// <summary>
        /// Đơn vị kiến thức bao phủ
        /// </summary>
        public string knowledgeId { set; get; }
        /// <summary>
        /// Số lượng câu hỏi
        /// </summary>
        public int countQuestion { set; get; }
        /// <summary>
        /// Gets the total question.
        /// </summary>
        /// <value>
        /// The total question.
        /// </value>
        public int totalQuestion
        {
            get
            {
                if (ruleSelectQuestions == null)
                {
                    return 0;
                }
                var _countQuestion = ruleSelectQuestions.Sum(x => x.countQuestion);
                return _countQuestion;
            }
        }
        /// <summary>
        /// Danh sách luật lấy câu hỏi
        /// </summary>
        public List<ruleSelectQuestionsTest> ruleSelectQuestions { set; get; }
        /// <summary>
        /// Thời gian tạo
        /// </summary>        
        public DateTime dateCreate { get; set; } = DateTime.Now;
        /// <summary>
        ///
        /// </summary>
        public long timeUpdate { set; get; } = DateTime.Now.ToTimestamp();
        /// <summary>
        /// trạng thái hoạt động bài kiểm tra
        /// </summary>
        public enumStatusConfig status { set; get; }
        /// <summary>
        /// Loại bài kiểm tra theo thời gian
        /// </summary>
        public EnumGroupTest typeTest { set; get; }
        /// <summary>
        /// Độ user tiên
        /// </summary>
        public int order { set; get; }
        /// <summary>
        /// Thời gian làm bài
        /// </summary>
        public int timeDoTest { set; get; }
        /// <summary>
        /// Mã đối tác
        /// </summary>
        public string codePartner { set; get; }
        /// <summary>
        /// Email Người tạo / Id user hệ thống
        /// </summary>
        public string author { set; get; }
        /// <summary>
        ///
        /// </summary>
        public string title { get; set; }
        /// <summary>
        /// Ảnh mô tả bài thi
        /// </summary>
        public string thumbnail { set; get; }
        /// <summary>
        /// Thời gian mở bài kiểm tra
        /// </summary>
        /// <value>
        /// The schedule start.
        /// </value>
        public long timeOpen { set; get; } = DateTime.Now.ToTimestamp() - 1;
        /// <summary>
        /// Thời gian đóng bài kiểm tra tính bằng phút
        /// </summary>
        /// <value>
        /// The schedule start.
        /// </value>
        public long timeDurationClose { set; get; } = 0;
        /// <summary>
        /// Gets or sets the time duration detail.
        /// </summary>
        /// <value>
        /// The time duration detail.
        /// </value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for timeDurationDetail
        public long timeSeeDetail { set; get; } = DateTime.Now.ToTimestamp() - 1;
        /// <summary>
        /// Gets or sets the total show flashcard video.
        /// </summary>
        /// <value>
        /// The total show flashcard video.
        /// </value>
        public long? totalShowFlashcardVideo { set; get; } = 10000;
        /// <summary>
        /// Gets or sets the total show flashcard text.
        /// </summary>
        /// <value>
        /// The total show flashcard text.
        /// </value>
        public long? totalShowFlashcardText { set; get; } = 10000;
        /// <summary>
        /// Gets or sets the total show enabled comment.
        /// </summary>
        /// <value>
        /// The total show enabled comment.
        /// </value>
        public long? totalShowEnabledComment { set; get; } = 10000;
        /// <summary>
        /// Gets or sets the total show explain.
        /// </summary>
        /// <value>
        /// The total show explain.
        /// </value>
        public long? totalShowExplain { set; get; } = 10000;
        /// <summary>
        /// Gets the duration.
        /// </summary>
        /// <returns></returns>
        public int GetDuration()
        {
            var _duration = 518400;
            switch (typeTest)
            {
                case EnumGroupTest.T15:
                    _duration = 15;
                    break;
                case EnumGroupTest.T30:
                    _duration = 30;
                    break;
                case EnumGroupTest.T45:
                    _duration = 45;
                    break;
                case EnumGroupTest.T50:
                    _duration = 50;
                    break;
                case EnumGroupTest.T60:
                    _duration = 60;
                    break;
                case EnumGroupTest.T90:
                    _duration = 90;
                    break;
                case EnumGroupTest.T120:
                    _duration = 120;
                    break;
                case EnumGroupTest.T180:
                    _duration = 180;
                    break;
                case EnumGroupTest.NoTime:
                    _duration = 518400;
                    break;
                default:
                    _duration = timeDoTest;
                    if (_duration <= 0)
                    {
                        _duration = 518400;
                    }
                    break;
            }
            return _duration;
        }

        /// <summary>
        /// Determines whether [is change hochay] [the specified data].
        /// </summary>
        /// <param name="data">The data.</param>
        /// <returns>
        ///   <c>true</c> if [is change hochay] [the specified data]; otherwise, <c>false</c>.
        /// </returns>
        public bool IsChangeHochay(Test data)
        {
            if (this.totalQuestion != data.totalQuestion) return true;
            foreach (var item in this.ruleSelectQuestions)
            {
                var temp = data.ruleSelectQuestions.FirstOrDefault(x => x.knowledgeId == item.knowledgeId);
                if (temp != null && temp.levelKnowledge != item.levelKnowledge)
                {
                    return true;
                }
            }
            return false;
        }
    }
  
    public class ruleSelectQuestionsTest
    {
        public int Id { set; get; }
        /// <summary>
        /// Thứ tự trong luật chọn câu hỏi
        /// </summary>
        public int index { set; get; }
        /// <summary>
        /// Gets or sets the subject identifier.
        /// </summary>
        /// <value>
        /// The subject identifier.
        /// </value>
        public string subjectId { set; get; }
        /// <summary>
        /// Đơn vị kiến thức
        /// </summary>
        public string knowledgeId { set; get; }
        /// <summary>
        /// Cấp độ nhận thức
        /// </summary>
        public enumKnowledgeLevel levelKnowledge { set; get; }
        /// <summary>
        /// id cau hoi mac dinh
        /// </summary>
        public string questionId { set; get; }
        /// <summary>
        /// dạng nội dung câu hỏi
        /// <para>1. 0 : dạng chuẩn | dataStandard</para>
        /// <para>2. 1 : dạng câu hỏi có bài nghe - đọc - video đi cùng | dataMaterial</para>
        /// </summary>
        public typeDataStep typeData { set; get; }
        /// <summary>
        /// Nhóm câu hỏi
        /// <para>1. 0: Chọn các đáp án đúng </para>
        /// <para>2. 1: True or False </para>
        /// <para>3. 2 : Điền từ - Trình bày tự luận</para>
        /// <para>4. 3 : Trình bày tự luận</para>
        /// </summary>
        public EnumTypeQuestionInMaterial groupQuestion { set; get; }
        /// <summary>
        /// Số lượng câu hỏi
        /// </summary>
        public int countQuestion { set; get; } = 1;
        /// <summary>
        /// lay het cau hoi cua nhom hoc lieu
        /// </summary>
        public bool isSelectAllQuestionMaterial { set; get; }

        /// <summary>
        /// Lấy câu hỏi thuộc các dạng bài xxx
        /// </summary>
        //public List<string> incluedPostType { set; get; } = new List<string>();

        /// <summary>
        /// Các lấy câu hỏi học liệu
        /// <para></para>1. 0 : Lấy cùng một dạng
        /// <para></para>2. 1 : Lấy đến số lượng
        /// <para></para>3. 2 : Lấy đúng số lượng
        /// </summary>
        public EnumSelectQuestionInMaterial selectNumberQuestionMaterial { set; get; }
        /// <summary>
        /// Gets or sets the type select question.
        /// </summary>
        /// <value>
        /// The type select question.
        /// </value>
        public enumSelectQuestion typeSelectQuestion { set; get; }
    }

    /// <summary>
    /// Trạng thái
    /// <para></para>1. 0 Xóa vẫn lưu trên hệ thống
    /// <para></para>2. 1 Không hoạt động
    /// <para></para>3. 2 Đang hoạt động
    /// <para></para>4. 3 Kiểm thử
    /// </summary>
    public enum enumStatusConfig
    {
        /// <summary>
        /// Xóa vẫn lưu trên hệ thống
        /// </summary>
        [Description("Xóa")] Delete = 0,
        /// <summary>
        /// Không hoạt động
        /// </summary>
        [Description("Không hoạt động")] Available = 1,
        /// <summary>
        /// Đang hoạt động
        /// </summary>
        [Description("Đang hoạt động")] Enabled = 2,
        /// <summary>
        /// Kiểm thử
        /// </summary>
        [Description("Kiểm thử")] Test = 3,
    }

    /// <summary>
    /// Loại bài kiểm tra, thời gian, HK1, Hk2, THPT
    /// </summary>
    public enum EnumGroupTest
    {
        /// <summary>
        /// Thi / Kiểm Tra 15 phút
        /// </summary>
        [Description("Thi / Kiểm Tra 15 phút")]
        T15 = 0,
        /// <summary>
        /// Thi / Kiểm Tra 45 phút
        /// </summary>
        [Description("Thi / Kiểm Tra 45 phút")]
        T45 = 1,
        /// <summary>
        /// Thi / Kiểm Tra 50 phút
        /// </summary>
        [Description("Thi / Kiểm Tra 50 phút")]
        T50 = 2,
        /// <summary>
        /// Thi / Kiểm Tra 60 phút
        /// </summary>
        [Description("Thi / Kiểm Tra 60 phút")]
        T60 = 3,
        /// <summary>
        /// Thi / Kiểm Tra 90 phút
        /// </summary>
        [Description("Thi / Kiểm Tra 90 phút")]
        T90 = 4,
        /// <summary>
        /// Thi / Kiểm Tra 120 phút
        /// </summary>
        [Description("Thi / Kiểm Tra 120 phút")]
        T120 = 5,
        /// <summary>
        /// Thi / Kiểm Tra 180 phút
        /// </summary>
        [Description("Thi / Kiểm Tra 180 phút")]
        T180 = 6,
        /// <summary>
        /// Thi / Kiểm Tra Học Kỳ 1 phút
        /// </summary>
        [Description("Thi / Kiểm Tra học kỳ I")]
        HKI = 7,
        /// <summary>
        /// Thi / Kiểm Tra học kỳ 2 phút
        /// </summary>
        [Description("Thi / Kiểm Tra học kỳ II")] HK2 = 8,
        /// <summary>
        /// Thi / Kiểm Tra trung học phổ thông quốc gia phút
        /// </summary>
        [Description("Thi / Kiểm Tra THPT Quốc Gia")] THPTQG = 9,
        /// <summary>
        /// Thi / Kiểm Tra đại học phút
        /// </summary>
        [Description("Thi / Kiểm Tra Đại Học")] THITHU_DAIHOC = 10,
        /// <summary>
        /// Nhập thời gian
        /// </summary>
        [Description("Nhập thời gian")] CustomTime = 11,
        /// <summary>
        /// Thi / Kiểm Tra 30 phút
        /// </summary>
        [Description("Thi / Kiểm Tra 30 phút")]
        T30 = 12,
        /// <summary>
        /// Đánh giá năng lực
        /// </summary>
        [Description("Đánh giá năng lực")] SLA = 13,
        /// <summary>
        /// Không Tính thời gian
        /// </summary>
        [Description("Không Tính thời gian")] NoTime = 14,
    }

    /// <summary>
    /// Cấp độ nhận thức
    /// <para></para>1. 0 : nhận biết
    /// <para></para>2. 1 : Thông hiểu
    /// <para></para>3. 2 : Vận dụng
    /// <para></para>4. 3 : Vận dụng cao
    /// </summary>
    public enum enumKnowledgeLevel
    {
        /// <summary>
        /// Nhận biết
        /// </summary>
        [Description("Nhận biết")] NhanBiet = 0,
        /// <summary>
        /// Thông hiểu
        /// </summary>
        [Description("Thông hiểu")] ThongHieu = 1,
        /// <summary>
        /// Vận dụng
        /// </summary>
        [Description("Vận dụng")] VanDung = 2,
        /// <summary>
        /// Vận dụng cao
        /// </summary>
        [Description("Vận dụng cao")] VanDungCao = 3
    }

    /// <summary>
    /// Dạng data step
    /// <para></para>1. 0 : Nội dung câu hỏi dạng chuẩn
    /// <para></para>2. 1 : Nội dung câu hỏi có phần đề chung (bài nghe, đọc, video, hoặc tư liệu liên quan)
    /// </summary>
    [Description("Dạng data step")]
    public enum typeDataStep
    {
        /// <summary>
        /// Nội dung câu hỏi dạng chuẩn
        /// </summary>
        [Description("Nội dung câu hỏi dạng chuẩn")] DataStandard = 0,
        /// <summary>
        /// Nội dung câu hỏi có phần đề chung (bài nghe, đọc, video, hoặc tư liệu liên quan)
        /// </summary>
        [Description("Nội dung câu hỏi có học liệu")] DataMaterial = 1
    }

    /// <summary>
    /// Nhóm câu hỏi trong một học liệu
    /// <para></para>. 0: Chọn các đáp án đúng
    /// <para></para>. 1: Dạng True / False
    /// <para></para>. 2 :Điền đáp án có thể trả lời được
    /// <para></para>. 3 :Câu hỏi chưa có đáp án - tự luận điền đáp án hệ thống không chấm - tự trả lởi và tự chấm
    /// </summary>
    public enum EnumTypeQuestionInMaterial
    {
        /// <summary>
        /// Chọn các đáp án đúng
        /// </summary>
        [Description("Chọn các đáp án đúng")] ManyOption = 0,
        /// <summary>
        /// Dạng True / False
        /// </summary>
        [Description("True or False")] TrueOrFalse = 1,
        /// <summary>
        /// Điền đáp án có thể trả lời được
        /// </summary>
        [Description("Điền đáp án")] TextAnswer = 2,
        /// <summary>
        /// Câu hỏi chưa có đáp án - tự luận điền đáp án hệ thống không chấm - tự trả lởi và tự chấm
        /// </summary>
        [Description("Trả lời tự luận")] SelfAnswer = 3
    }

    /// <summary>
    /// Các lấy câu hỏi học liệu
    /// <para></para>1. 0 : Lấy cùng một dạng
    /// <para></para>2. 1 : Lấy đến số lượng
    /// <para></para>3. 2 : Lấy đúng số lượng
    /// </summary>
    [Description("Các lấy câu hỏi học liệu")]
    public enum EnumSelectQuestionInMaterial
    {
        /// <summary>
        /// Lấy cùng một dạng
        /// </summary>
        [Description("Lấy cùng một dạng")] QuestionRandom = 0,
        /// <summary>
        /// Lấy đến số lượng
        /// </summary>
        [Description("Lấy đúng số lượng")] QuestionEd = 1,
        /// <summary>
        /// Lấy đúng số lượng
        /// </summary>
        [Description("Lấy đủ số lượng")] QuestionGte = 2
    }
    /// <summary>
    /// Cách lấy câu hỏi
    /// <para></para>0 : lấy câu hỏi chỉ định bới ID
    /// <para></para>1 : Lấy câu hỏi theo luật
    /// </summary> 
    [Description("Cách lấy câu hỏi")]
    public enum enumSelectQuestion
    {
        /// <summary>
        /// Lấy câu hỏi chỉ định theo ID
        /// </summary>
        [Description("Lấy câu hỏi chỉ định")] Fixed = 0,
        /// <summary>
        /// Lấy câu hỏi ngẫu nhiên theo luật
        /// </summary>
        [Description("Lấy câu hỏi động")] Dynamic = 1
    }
}