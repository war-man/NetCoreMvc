using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

namespace RicoCore.Data.Entities.Test
{
    public static class ExtensionMethod
    {
        /// <summary>
        /// "dd/MM/yyyy HH:mm"
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for formatVN
        public static string formatVN = "dd/MM/yyyy HH:mm";
        /// <summary>
        /// Gets the day start of month.
        /// </summary>
        /// <param name="date">The date.</param>
        /// <returns></returns>
        public static DateTime GetDayStartOfMonth(this DateTime date)
        {
            DateTime firstDayOfMonth = new DateTime(date.Year, date.Month, 0).Date;
            return firstDayOfMonth;
        }
        /// <summary>
        /// Gets the day start of weed.
        /// </summary>
        /// <param name="date">The date.</param>
        /// <returns></returns>
        public static DateTime GetDayStartOfWeed(this DateTime date)
        {
            int diff = -(int)date.DayOfWeek;
            return date.AddDays(diff).Date;
        }
        /// <summary>
        /// Starts the of week.
        /// </summary>
        /// <param name="dt">The dt.</param>
        /// <param name="startOfWeek">The start of week.</param>
        /// <returns></returns>
        public static DateTime StartOfWeek(this DateTime dt, DayOfWeek startOfWeek)
        {
            int diff = (7 + (dt.DayOfWeek - startOfWeek)) % 7;
            return dt.AddDays(-1 * diff).Date;
        }
        /// <summary>
        /// Weeks the of year.
        /// </summary>
        /// <param name="dt">The dt.</param>
        /// <param name="startOfWeek">The start of week.</param>
        /// <returns></returns>
        public static DateTime WeekOfYear(this DateTime dt, DayOfWeek startOfWeek)
        {
            int diff = (7 + (dt.DayOfWeek - startOfWeek)) % 7;
            return dt.AddDays(-1 * diff).Date;
        }
        /// <summary>
        /// Converts to timestamp.
        /// </summary>
        /// <param name="dateTime">The date time.</param>
        /// <returns></returns>
        public static long ToTimestamp(this DateTime dateTime)
        {
            // Unix timestamp is seconds past epoch
            DateTime origin = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
            TimeSpan diff = dateTime.ToUniversalTime() - origin;
            return Convert.ToInt64(Math.Floor(diff.TotalSeconds));
        }
        /// <summary>
        /// Converts to birthday long yyyyddMM.
        /// </summary>
        /// <param name="dateTime">The date time.</param>
        /// <returns></returns>
        public static long ToBirthdayLong(this DateTime dateTime)
        {
            var strBirthday = dateTime.ToString("yyyyddMM");
            return Convert.ToInt64(strBirthday);
        }
        /// <summary>
        /// Converts to birthdaydate.
        /// </summary>
        /// <param name="BirthdayLong">The birthday long.</param>
        /// <returns></returns>
        public static DateTime ToBirthdayDate(this long BirthdayLong)
        {
            TryParseExact(BirthdayLong.ToString(), "yyyyddMM", out DateTime date);
            return date;
        }
        /// <summary>
        /// Converts to datetime.
        /// </summary>
        /// <param name="timestamp">The timestamp.</param>
        /// <returns></returns>
        public static DateTime ToDateTime(this long timestamp)
        {
            // Unix timestamp is seconds past epoch 
            DateTime origin = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
            origin = origin.AddSeconds(timestamp);
            return origin.ToLocalTime();
        }
        /// <summary>
        /// Tries the parse exact.
        /// </summary>
        /// <param name="timeString">The time string.</param>
        /// <param name="format">"dd/MM/yyyy HH:mm"</param>
        /// <param name="dateTime">The date time.</param>
        /// <returns></returns>
        public static bool TryParseExact(string timeString, string format, out DateTime dateTime)
        {
            return DateTime.TryParseExact(timeString, format, CultureInfo.CurrentCulture, DateTimeStyles.None, out dateTime);
        }
        /// <summary>
        /// To the string vn.
        /// </summary>
        /// <param name="dateTime">The date time.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ToStringVN
        public static string ToStringVN(this DateTime dateTime)
        {
            return dateTime.ToString(formatVN);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="timeStringDateTimeVN">dd/MM/yyyy HH:mm</param>
        /// <returns></returns>
        public static DateTime ToDateTimeVN(this string timeStringDateTimeVN)
        {
            if (DateTime.TryParseExact(timeStringDateTimeVN, formatVN, CultureInfo.CurrentCulture, DateTimeStyles.None, out DateTime dateTime))
            {
                return dateTime;
            }
            return DateTime.Now;
        }
        /// <summary>
        /// Gets the day start of weed.
        /// </summary>
        /// <param name="date">The date.</param>
        /// <returns></returns>
        public static DateTime StringToDatetime(this string date)
        {
            if (DateTime.TryParseExact(date, "dd/MM/yyyy", CultureInfo.CurrentCulture, DateTimeStyles.None, out DateTime dateTime))
            {
                return dateTime;
            }
            return DateTime.Now;
        }
        /// <summary>
        /// Weeks the of year.
        /// </summary>
        /// <param name="dt">The dt.</param>
        /// <returns></returns>
        public static int WeekOfYear(this DateTime dt)
        {
            Calendar myCal = DateTimeFormatInfo.CurrentInfo.Calendar;
            int weekCount = myCal.GetWeekOfYear(dt, DateTimeFormatInfo.CurrentInfo.CalendarWeekRule, DateTimeFormatInfo.CurrentInfo.FirstDayOfWeek);
            return weekCount;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="birthday">yyyy-MM-dd</param>
        /// <param name="dateTime"></param>
        /// <returns></returns>
        public static string GetBirthday(string birthday, out DateTime dateTime)
        {
            var birthdayLong = GetBirthdayLong(birthday);
            dateTime = ToBirthdayDate(birthdayLong);
            return dateTime.ToBirthday();
        }
        /// <summary>
        /// Gets the birthday long = yyyyMMdd.
        /// </summary>
        /// <param name="birthday">The birthday (dd/MM/yyyy) (dd-MM-yyyy) .</param>
        /// <returns>yyyyddMM</returns>
        public static long GetBirthdayLong(string birthday)
        {
            try
            {
                birthday = birthday.Replace("-", "/");
                var arr = birthday.Split('/');
                var n1 = int.Parse(arr[0]);
                var n2 = int.Parse(arr[1]);
                var n3 = int.Parse(arr[2]);
                int y = 0;
                int d = 0;
                int m = 0;
                if (n3 > 1900)
                {
                    y = n3;
                    if (n2 > 12)
                    {
                        d = n2;
                        m = n1;
                    }
                    else if (n1 > 12)
                    {
                        d = n1;
                        m = n2;
                    }
                    else
                    {
                        d = n1;
                        m = n2;
                    }
                }
                else if (n1 > 1900)
                {
                    y = n1;
                    if (n2 > 12)
                    {
                        d = n2;
                        m = n3;
                    }
                    else if (n3 > 12)
                    {
                        d = n3;
                        m = n2;
                    }
                    else
                    {
                        d = n3;
                        m = n2;
                    }
                }
                return new DateTime(y, m, d).ToBirthdayLong();
            }
            catch { }
            return 0;
        }
        /// <summary>
        /// Converts to birthday.
        /// </summary>
        /// <param name="dateTime">The date time.</param>
        /// <returns></returns>
        public static string ToBirthday(this DateTime dateTime)
        {
            return dateTime.ToString("yyyy-MM-dd");
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="dateTime"></param>
        /// <param name="strFormat"></param>
        /// <returns></returns>
        public static string ToLocalString(this DateTime dateTime, string strFormat = "dd-MM-yyyy HH:ss")
        {
            return dateTime.ToLocalTime().ToString(strFormat);
        }
    }
}
